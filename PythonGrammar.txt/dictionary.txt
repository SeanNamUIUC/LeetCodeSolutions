파이썬에서 **딕셔너리(dictionary)**는 키와 값의 쌍을 저장하는 자료구조입니다. **중괄호 {}**로 정의되며, **키(key)**와 **값(value)**은 :로 구분됩니다. 딕셔너리는 리스트나 튜플과 달리 순서가 없고, 키를 이용해 값을 빠르게 조회할 수 있다는 특징이 있습니다.

딕셔너리 기본 문법
python
복사
편집
# 기본 딕셔너리 생성
my_dict = {
    'apple': 2,
    'banana': 3,
    'orange': 5
}
'apple', 'banana', 'orange'는 키(key), 2, 3, 5는 **값(value)**입니다.

키는 변경 불가능한 자료형(예: 문자열, 튜플)을 사용해야 하며, 값은 어떤 자료형이든 가능합니다.

딕셔너리 작업 예시
1. 딕셔너리 값 조회
딕셔너리에서 특정 키에 해당하는 값을 조회하려면, 그 키를 대괄호 [] 안에 넣습니다.

python
복사
편집
print(my_dict['apple'])  # 출력: 2
만약 존재하지 않는 키에 접근하면 KeyError가 발생합니다.

2. 딕셔너리에 새로운 항목 추가
딕셔너리에는 새로운 키-값 쌍을 추가할 수 있습니다.

python
복사
편집
my_dict['grape'] = 4
print(my_dict)  # 출력: {'apple': 2, 'banana': 3, 'orange': 5, 'grape': 4}
3. 딕셔너리 값 수정
기존에 있는 키의 값을 수정하려면 해당 키를 이용하여 값을 재할당하면 됩니다.

python
복사
편집
my_dict['apple'] = 10
print(my_dict)  # 출력: {'apple': 10, 'banana': 3, 'orange': 5, 'grape': 4}
4. 딕셔너리에서 키 삭제
del 키워드를 이용해 딕셔너리에서 특정 키-값을 삭제할 수 있습니다.

python
복사
편집
del my_dict['banana']
print(my_dict)  # 출력: {'apple': 10, 'orange': 5, 'grape': 4}
5. 딕셔너리에서 값 조회 (get() 사용)
get() 메서드는 키가 존재하지 않으면 오류를 발생시키지 않고 None을 반환합니다.

python
복사
편집
print(my_dict.get('apple'))  # 출력: 10
print(my_dict.get('kiwi'))  # 출력: None
키가 존재하지 않으면 None을 반환하지만, 두 번째 인자를 지정하면 기본값을 설정할 수 있습니다.

python
복사
편집
print(my_dict.get('kiwi', 'Not Found'))  # 출력: Not Found
6. 딕셔너리의 모든 키, 값, 항목 조회
keys() : 딕셔너리의 모든 키를 반환

values() : 딕셔너리의 모든 값을 반환

items() : 딕셔너리의 모든 키-값 쌍을 튜플로 반환

python
복사
편집
print(my_dict.keys())    # 출력: dict_keys(['apple', 'orange', 'grape'])
print(my_dict.values())  # 출력: dict_values([10, 5, 4])
print(my_dict.items())   # 출력: dict_items([('apple', 10), ('orange', 5), ('grape', 4)])
7. 딕셔너리 복사 (copy)
딕셔너리를 얕은 복사하려면 copy() 메서드를 사용합니다.

python
복사
편집
new_dict = my_dict.copy()
print(new_dict)  # 출력: {'apple': 10, 'orange': 5, 'grape': 4}
8. 딕셔너리 병합 (update)
두 딕셔너리를 합칠 때 update() 메서드를 사용합니다. 만약 같은 키가 존재하면, 후에 들어오는 딕셔너리의 값으로 덮어씁니다.

python
복사
편집
new_data = {'kiwi': 7, 'grape': 6}
my_dict.update(new_data)
print(my_dict)  # 출력: {'apple': 10, 'orange': 5, 'grape': 6, 'kiwi': 7}
9. 딕셔너리 길이 구하기 (len)
len() 함수로 딕셔너리의 키의 개수를 구할 수 있습니다.

python
복사
편집
print(len(my_dict))  # 출력: 4
딕셔너리 관련 고급 기능
10. dict 컴프리헨션
딕셔너리 컴프리헨션을 사용하면 한 줄로 딕셔너리를 만들 수 있습니다.

python
복사
편집
squares = {x: x**2 for x in range(5)}
print(squares)  # 출력: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
11. defaultdict
defaultdict는 기본값을 설정할 수 있는 딕셔너리입니다. 키가 없을 때 기본값을 반환하도록 설정할 수 있습니다.

python
복사
편집
from collections import defaultdict

my_dict = defaultdict(int)  # 기본값이 0인 딕셔너리
my_dict['apple'] = 3
print(my_dict['banana'])  # 출력: 0 (없으면 기본값인 0 반환)
12. Counter
Counter는 빈도수 카운팅에 유용한 딕셔너리의 서브클래스입니다.

python
복사
편집
from collections import Counter

word_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']
counter = Counter(word_list)
print(counter)  # 출력: Counter({'apple': 3, 'banana': 2, 'orange': 1})
요약
딕셔너리 생성: {key: value, ...}

값 조회: my_dict[key], my_dict.get(key)

값 추가/수정: my_dict[key] = value

삭제: del my_dict[key]

모든 키/값/항목 조회: my_dict.keys(), my_dict.values(), my_dict.items()

복사: my_dict.copy()

병합: my_dict.update(other_dict)

길이 구하기: len(my_dict)

딕셔너리는 파이썬에서 효율적이고 빠르게 키-값 쌍을 관리할 수 있는 중요한 자료구조입니다.