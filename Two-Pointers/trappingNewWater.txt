//key idea is to check left and right boundary(max height) everytime and update and calculate it.
//We should update shorter one to not make water overflow


class Solution {
public:
    int trap(vector<int>& height) {
        if(height.size() == 1 || height.size() == 2) {
            return 0;
        }
        int maxLeft = height[0];
        int maxRight = height[height.size() - 1];
        int left = 0;
        int right = height.size() - 1;
        int result = 0;
        //to make the water limit to shorter one
        while(left < right) {
            cout << "left" <<left << "right" << right << endl;
            if(height[left] < height[right]) {
                left++;
                maxLeft = max(maxLeft, height[left]);
                result += maxLeft - height[left];
            } else {
                right--;
                maxRight = max(maxRight, height[right]);
                result += maxRight - height[right];
            }
        } 
        return result;

    }
};